public class ContactTriggerHandler 
{  
    public static void checkInputEmailsForInsert(List<Contact> lstContacts)
    {
       set<String> setNonDuplicatEmailCont =new Set<String>();
        Map<String,Integer> mapCont = new Map<String,Integer>();
			for (Contact contact : lstContacts )
			{   Integer count =0;
             if(contact.Email !=null || !String.isBlank(contact.email))
             {
    				if(mapCont.containsKey(contact.Email))
    				{
        				System.debug('cont.Email ::' +contact.Email);
        				Integer emailcount = mapCont.get(contact.Email);
       				 	System.debug('emailcount ::' +emailcount);
      					mapCont.put(contact.Email,++emailcount);
                    	setNonDuplicatEmailCont.remove(contact.Email);
    				}
             
    				else
    				{
       					mapCont.put(contact.Email,++count); 
                    	setNonDuplicatEmailCont.add(contact.Email);
    				}
				}
            }
			System.debug('mapCont :::' +mapCont);
         System.debug('mapCont.KeySet() ::'+mapCont.KeySet());
		System.debug('setNonDuplicatEmailCont ::' + setNonDuplicatEmailCont);
		List<Contact> lstExistingContacts = [SELECT Email FROM Contact WHERE Email IN :setNonDuplicatEmailCont]; 
        set<String> setExistingEmails = new set<String>();
        for (Contact contact : lstExistingContacts )
        {
            setExistingEmails.add(contact.Email);
        }
        
        for (Contact contact : lstContacts )
        {
            if(mapCont.get(contact.Email) > 1 )
            {
                Contact.addError('Contact List Contains Duplicate Record IN Input List');//+Contact.Email);
            }
            else
            {
                if(setExistingEmails.contains(contact.Email))
                	Contact.addError(' Contact  exist  IN DATABASE');
            }
        }
    }        
public static void checkInputEmailsForUpdate(List<Contact> newLstContacts ,map<id,Contact> oldMapContacts ) 
   {
        System.debug('In trigger UPDATE');
        System.debug('Trigger New ::::::'+newLstContacts);
      	//ValidateEmailHandler.checkInputEmailsForUpdate(Trigger.New,Trigger.old);
	Map<String, Contact> contactMap = new Map<String, Contact>(); //MAP<Email,Contact of Email>
      List<Id> lstIdofOldMap = new List<Id>(); 
     set<String> setNonDuplicatEmailCont =new Set<String>();
        Map<String,Integer> mapCont = new Map<String,Integer>();   
    for (Contact Contact : newLstContacts)
    {
       
          	if ((!String.isBlank(Contact.Email)) && (Contact.Email != oldMapContacts.get(Contact.Id).Email)) 
          	{
              Integer count =0;
    		  if(mapCont.containsKey(contact.Email))
    		  {
        		System.debug('cont.Email ::' +contact.Email);
        		Integer emailcount = mapCont.get(contact.Email);
       		    System.debug('emailcount ::' +emailcount);
      		    mapCont.put(contact.Email,++emailcount);
                setNonDuplicatEmailCont.remove(contact.Email);
    		   }
    		   else
    		   {
       			mapCont.put(contact.Email,++count); 
                setNonDuplicatEmailCont.add(contact.Email);
    		    }
          }
    }
        System.debug('mapCont :::' +mapCont);
        System.debug('mapCont.KeySet() ::'+mapCont.KeySet());
		System.debug('setNonDuplicatEmailCont ::' + setNonDuplicatEmailCont);
		List<Contact> lstExistingContacts = [SELECT Email FROM Contact WHERE Email IN :setNonDuplicatEmailCont]; 
        set<String> setExistingEmails = new set<String>();  
        for (Contact contact : lstExistingContacts )
        {
            setExistingEmails.add(contact.Email);
        }
        
        for (Contact contact : newLstContacts )
        {
            if(mapCont.get(contact.Email) > 1 )
            {
                Contact.addError('Contact List Contains Duplicate Record IN Input List');//+Contact.Email);
            }
            else
            {
                if(setExistingEmails.contains(contact.Email))
                Contact.addError(' Contact  exist  IN DATABASE');
            }
        }

 }             
}